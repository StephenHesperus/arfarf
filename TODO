# vim: ft=python
[x] Dog proxy
    [x] PatternMatchingEventHander params
    [x] Observer.schedule params
    [x] use_gitignore option, parse_gitignore()
        [x] use_gitignore
        [x] _parse_gitignore
        [-] prerequisite:
            1. The .gitignore file exists and are under the directory where
               the script is run.
            2. The .gitignore file is formatted so that each line only
               contains one pattern, comments using '# comment' form is OK.
        [x] parse gitignore only once
            [!] when trying to access a class attribute, it should be a
                classmethod
            [-] gitignore support csv values, since it's a cheap operation now
                [!] support clean .gitignore format, that is, like
                    https://github.com/github/gitignore, or
                    https://github.com/joeblau/gitignore, or
                    should I say, __line based patterns__
                [x] 1. blank line
                [x] 2. comment line starting with '#'
                [x] 3. '\#' to escape a '#' character
                [x] 4. '\ ' to escape a ' ' character
                [x] 5. '\!' to escape a '!' character
                [-] 6. '!' to include a previous pattern
                    [!] this won't make any sense to ignore_patterns, to
                        include those patterns, specify it in patterns
            [ ] raise exception when file not found
    [x] create handler
    [x] prototype:
        dog(command='', patterns=['*'], ignore_patterns=[],
            ignore_directories=False, path='.', recursive=True,
            use_gitignore=False)
        dog('echo hello', ['*.py'], [], False, '.', True, True)
        dog('echo hello', ['*.py'], use_gitignore=True)
        dog(command='echo hello', patterns=['*.py'], use_gitignore=True)
        explanation:
            command default: empty, do nothing
            patterns default: include everything
            ignore_patterns default: exclude nothing
            ignore_directories default: no, means monitor directories changes
            path default: the directory the script is run, that is $PWD
            recursive default: traverse to subdirectories
            use_gitignore default: no, if you use Git, set this option

[ ] AutoRunTrick : AutoRestartTrick
    [ ] context print injection(print -> echo command)
    [x] override __init__(), start()
    [x] equality
    [x] hashable
    [x] __repr__
    [x] start() tests
    [x] stop() tests

[x] ~~_parse_wdcofig(Observer, dogs):~~ WDConfigParser(Dogs)
    [x] sort out dogs
        [x] dict: key: (path, recursive), value: dogs
        [x] Dog.watch_info
        [x] Dog.create_handler()
        [x] remove duplications
    [x] schedule handler
    [-] add handler to the same ObservedWatch
    [x] refactor: remove unused _sort method

[ ] wdconfig.py
    [ ] dogs is a tuple of wdog.Dog

[x] fix WDConfigParserTestCase class doc string

[x] Dog, AutoRunTrick command arg no default, make it positional

[x] main
    [x] after schedule handlers, start the handler
    [x] after observer stop, stop the handler
    [x] expose AutoRunTrick start(), stop()


[-] change all Dog keyword arguments default value to tuple
    [x] or change the list param to tuple when hashing

[ ] use tempfile to test wdog.py
    [x] use shell redirect to test logfile
    [*] change to tempdir and change back after the test
    [-] use multiprocessing to start wdog.py
        [ ] use wdog main()
        [ ] use mock dogs

[*] main()
    [*] _create_main_argparser()
        [x] empty arg list
        [x] use --config-file option to specify a wdconfig.py file
            [ ] the name of the file is not significant
        [x] use --gitignore option to specify a .gitignore file
            [ ] the name of the file is not significant
        [-] use subclass of ArgumentParser to test, mock exception
        [x] tests
    [x] use args default value None, that is, from command line
    [x] use arglist
    [x] test can use --config-file/-c, --gitignore/-g option
    [*] test file system events
        [*] command default
            [*] file events
                [*] all file events
                [ ] typed file events
            [ ] directory events

[x] Dog bugs:
    [x] AutoRunTrick: on_any_event(), start() call arguments
    [x] Dog patterns, ignore_patterns default value
        [x] patterns default: include everything
        [x] ignore_patterns default: exclude nothing
        [x] watchdog internally use pathtools.patterns.match_any_paths in
            PatternMatchingEventHandler, and this is the match_any_paths()
            signature:
            match_any_paths(pathnames, included_patterns=None,
                            excluded_patterns=None, case_sensitive=True)
            so the patterns, and ignore_patterns default value should be None
    [x] __repr__() when patterns and ignore_patterns are None

[x] use defaultdict() to refactor WDConfigParser.schedule_with()

[x] add event_src_path, dest path, event type environment variables
    [x] if command is '', use a default log command
        [x] expose event related shell environment variables
    [x] refactor tests, default command

[ ] remove wdconfig.py default dog entry

[?] how to mock subprocess direct output
    [?] how to mock subprocess calls

[ ] add double quotes to default command output

[ ] add use_gitignore default option to wdconfig.py so it can be set to True
    [ ] dog use_gitignore keyword argument overrides the default option
    [ ] add command line option to set this

[ ] handle empty dogs tuple error, exit gracefully


====

[ ] about watchdog package:
    [ ] should document Observer.remove_handler_for_watch() and
        Observer.unschedule() raise KeyError if handler for watch or watch for
        observer does not exist
    [ ] should document Observer.schedule accepts both relative and absolute
        path
    [ ] should document ObservedWatch is hashable
    [ ] should document FileSystemEventHandler is hashable
        [ ] should document FileSystemEventHandler objects by default are not
            equal event they are constructed using the same parameters
    [ ] should document Observer.schedule and Observer.add_handler_for_watch
        both remove duplications automatically
    [ ] problem: generate two identical modified event in a row when modifying
        a file

[ ] nosetests
    [ ] @unittest.expectedFailure RuntimeWarning
