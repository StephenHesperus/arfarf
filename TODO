# vim: ft=python
[x] Dog proxy
    [x] PatternMatchingEventHander params
    [x] Observer.schedule params
    [x] use_gitignore option, parse_gitignore()
        [x] use_gitignore
        [x] _parse_gitignore
        [!] prerequisite:
            1. The .gitignore file exists and are under the directory where
               the script is run.
            2. The .gitignore file is formatted so that each line only
               contains one pattern, comments using '# comment' form is OK.
    [x] create handler
    [x] prototype:
        dog(command='', patterns=['*'], ignore_patterns=[],
            ignore_directories=False, path='.', recursive=True,
            use_gitignore=False)
        dog('echo hello', ['*.py'], [], False, '.', True, True)
        dog('echo hello', ['*.py'], use_gitignore=True)
        dog(command='echo hello', patterns=['*.py'], use_gitignore=True)
        explanation:
            command default: empty, do nothing
            patterns default: include everything
            ignore_patterns default: exclude nothing
            ignore_directories default: no, means monitor directories changes
            path default: the directory the script is run, that is $PWD
            recursive default: traverse to subdirectories
            use_gitignore default: no, if you use Git, set this option

[*] AutoRunTrick : AutoRestartTrick
    [ ] context print injection(print -> echo command)
    [x] override __init__(), start()
    [x] equality
    [x] hashable
    [x] __repr__

[x] ~~_parse_wdcofig(Observer, dogs):~~ WDConfigParser(Dogs)
    [x] sort out dogs
        [x] dict: key: (path, recursive), value: dogs
        [x] Dog.watch_info
        [x] Dog.create_handler()
        [x] remove duplications
    [x] schedule handler
    [-] add handler to the same ObservedWatch
    [x] refactor: remove unused _sort method

[ ] wdconfig.py
    [ ] dogs is a tuple of wdog.Dog

[x] fix WDConfigParserTestCase class doc string

[x] Dog, AutoRunTrick command arg no default, make it positional

====

[ ] about watchdog package:
    [ ] should document Observer.remove_handler_for_watch() and
        Observer.unschedule() raise KeyError if handler for watch or watch for
        observer does not exist
    [ ] should document Observer.schedule accepts both relative and absolute
        path
    [ ] should document ObservedWatch is hashable
    [ ] should document FileSystemEventHandler is hashable
        [ ] should document FileSystemEventHandler objects by default are not
            equal event they are constructed using the same parameters
    [ ] should document Observer.schedule and Observer.add_handler_for_watch
        both remove duplications automatically
