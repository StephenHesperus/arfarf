# vim: ft=python
[x] Dog proxy
    [x] PatternMatchingEventHander params
    [x] Observer.schedule params
    [x] use_gitignore option, parse_gitignore()
        [x] use_gitignore
        [x] _parse_gitignore
        [-] prerequisite:
            1. The .gitignore file exists and are under the directory where
               the script is run.
            2. The .gitignore file is formatted so that each line only
               contains one pattern, comments using '# comment' form is OK.
        [x] parse gitignore only once
            [!] when trying to access a class attribute, it should be a
                classmethod
            [-] gitignore support csv values, since it's a cheap operation now
                [!] support clean .gitignore format, that is, like
                    https://github.com/github/gitignore, or
                    https://github.com/joeblau/gitignore, or
                    should I say, __line based patterns__
                [x] 1. blank line
                [x] 2. comment line starting with '#'
                [x] 3. '\#' to escape a '#' character
                [x] 4. '\ ' to escape a ' ' character
                [x] 5. '\!' to escape a '!' character
                [-] 6. '!' to include a previous pattern
                    [!] this won't make any sense to ignore_patterns, to
                        include those patterns, specify it in patterns
            [ ] raise exception when file not found
    [x] create handler
    [x] prototype:
        dog(command='', patterns=['*'], ignore_patterns=[],
            ignore_directories=False, path='.', recursive=True,
            use_gitignore=False)
        dog('echo hello', ['*.py'], [], False, '.', True, True)
        dog('echo hello', ['*.py'], use_gitignore=True)
        dog(command='echo hello', patterns=['*.py'], use_gitignore=True)
        explanation:
            command default: empty, do nothing
            patterns default: include everything
            ignore_patterns default: exclude nothing
            ignore_directories default: no, means monitor directories changes
            path default: the directory the script is run, that is $PWD
            recursive default: traverse to subdirectories
            use_gitignore default: no, if you use Git, set this option

[x] AutoRunTrick : AutoRestartTrick
    [-] context print injection(print -> echo command)
    [x] override __init__(), start()
    [x] equality
    [x] hashable
    [x] __repr__
    [x] start() tests
    [x] stop() tests

[x] ~~_parse_wdcofig(Observer, dogs):~~ WDConfigParser(Dogs)
    [x] sort out dogs
        [x] dict: key: (path, recursive), value: dogs
        [x] Dog.watch_info
        [x] Dog.create_handler()
        [x] remove duplications
    [x] schedule handler
    [-] add handler to the same ObservedWatch
    [x] refactor: remove unused _sort method

[x] fix WDConfigParserTestCase class doc string

[x] main
    [x] after schedule handlers, start the handler
    [x] after observer stop, stop the handler
    [x] expose AutoRunTrick start(), stop()

[x] change the list param to tuple when hashing, or

[x] use defaultdict() to refactor WDConfigParser.schedule_with()

[x] add event_src_path, dest path, event type environment variables
    [x] if command is '', use a default log command
        [x] expose event related shell environment variables
    [x] refactor tests, default command

[x] Dog bugs:
    [x] AutoRunTrick: on_any_event(), start() call arguments
    [x] Dog patterns, ignore_patterns default value
        [x] patterns default: include everything
        [x] ignore_patterns default: exclude nothing
        [x] watchdog internally use pathtools.patterns.match_any_paths in
            PatternMatchingEventHandler, and this is the match_any_paths()
            signature:
            match_any_paths(pathnames, included_patterns=None,
                            excluded_patterns=None, case_sensitive=True)
            so the patterns, and ignore_patterns default value should be None
    [x] __repr__() when patterns and ignore_patterns are None

[x] main()
    [x] _create_main_argparser()
        [x] empty arg list
        [x] use --config-file option to specify a wdconfig.py file
            [x] the name of the file is not significant
        [x] use --gitignore option to specify a .gitignore file
            [x] the name of the file is not significant
        [x] tests
    [x] use args default value None, that is, from command line
    [x] use arglist
    [x] test can use --config-file/-c, --gitignore/-g option

[x] Dog, AutoRunTrick command arg
    [x] Dog command arg can be omitted
    [x] AutoRunTrick command can be omitted, and a default value is provided
        [x] by default, it's a log command

[x] override AutoRunTrick(Trick).dispatch() method
    [x] insert monitor path before included, excluded and gitignore patterns
        when create handler
    [x] adapt path as dir/file before matching, trailing slash
        ```
        def dispath(self, event):
            if hasattr(event, 'dest_path'):
                '''Append dest_path'''
            if event.src_path:
                '''Append src_path'''
            if event.is_directory:
                '''Append slash to event src_path
                if has attr dest_path:
                    Append slash to event dest_path
                '''
            ...
        ```
    [x] test dispatch
        [x] file events
            [x] included patterns
            [x] excluded patterns
        [x] directory events
            [x] included patterns
                [!] os.path.isdir() return True whether the path has trailing
                    slash or not
            [x] excluded patterns
            [x] ignore_directories is True
        [x] refactor dispatch tests
        [x] refactor dispatch implementation

[x] parse main args
    [x] args is None
    [x] args.config is not None
    [x] args.gitignore is not None
    [x] refactor main()

[x] refactor test_dispatch_dir_events_matching_patterns_when_ignore_directories

[x] separate Dog module

[x] create parser, parse args, apply args
    [x] _apply_main_args()

[x] Refactor test_construct_using_wdconfig_module(), use mock module instead
[x] separate WDConfigParser
[x] separate AutoRunTrick

[x] add use_gitignore default option to wdconfig.py so it can be set to True
    [x] dog use_gitignore keyword argument overrides the default option
    [x] make it always present in wdconfig
        [x] before create_handler(), use use_gitignore option to calculate the
            final value of use_gitignore
            [x] calculation:
                ```
                use = self._use_gitignore if self._use_gitignore is not None \
                      else type(self)._use_gitignore_default
                ```
    [x] WDConfigParser use a wdconfig_module as argument
        [x] parse dogs
        [x] parse Dog.use_gitignore_default
        [x] test dogs[0]._use_gitignore_default changed by
            _set_use_gitignore_default

[x] config file resolution order
    1. command line --config-file/-c option
        [x] if not found, raise error
    2. the directory the script runs
        [x] if wdconfig.py is not found
            exit and promote the user to use --create-wdconfig option
[x] gitignore file resolution order
    1. command line --gitignore/-g option
        [x] if not found, raise error
    2. the directory the script runs
        [-] if not found, raise error
            [!] FileNotFoundError won't raise until _parse_gitignore is called
[x] provide --create-wdconfig option to help create wdconfig.py

[x] provide wdconfig_ignore to set default '.gitignore'-like ignore file
    location
    [x] gitignore_path
[x] wdconfig.py
    [x] content:
        [x] dogs
        [x] use_gitignore_by_default
        [x] gitignore_path
        [ ] enable session info (future)
    [x] returned by _parse_main_args()

[x] refactor using pylint
    [x] refactor subprocess.Popen tests

[x] Refactor all local import

[x] add gitignore_path to fixture_wdconfig.py and wdconfig_template

[x] default logger eat the previous events when a bunch of events happen in
    sequence, e.g. file created, directory is modified
    [x] dir events add trailing slash
    [x] no exposure of context
    [x] refactor:
        [x] remove command redundant test
        [x] merge append slash to dir path in dispath() and
            _substitute_command()
    [x] when command is None: use default logger command
        [x] just print()
    [x] when event is None, start() execute an empty command ''

====

[*] prepare package

[*] project structure
    [x] project name: arfarf
    >project
        -setup.py
        +project
            -__init__.py
            -__main__.py
            +tests
                -__init__.py
                -test_main.py
    [x] change file names
        [x] change names in arfarf package
        [x] move tests to arfarf
    [x] refactor names to make everything work
        [x] make tests work
            [x] make test_misc.py work
            [x] make test_arfarf.py work
            [x] make test_tricks.py work
            [x] make test_parser.py work
            [x] make test_dog.py work
            [x] make test_arf.py work
            [x] make all tests work
    [ ] __main__.py:
        [ ] if arfarfconfig.py is not found, copy it, then exit
    [x] project name: arfarf
    [x] template name: arfarfconfig_template
    [x] project config name: arfarfconfig.py
    [x] command line arguments options:
        [x] --create-config/-t
        [x] --config-file/-c
        [x] --gitignore/-g
    [ ] add os.getcwd() to sys.path before import arfarfconfig
    [ ] sys.path.append instead of sys.path.insert
        [ ] do this also, before `import arfarfconfig`
    [ ] change arfarfconfig_template to _arfarfconfig_template.py
        [ ] or add it as non package data file


[ ] project structure examples
[ ] ipython
    tests along inside the subpackage
    >ipython
        -setup.py
            """
            entry_points['console_scripts'] = 'ipython = IPython:start_ipython'
            """
        -tox.ini
        +docs
        +examples
        +tools
        +IPython
            -__init__.py
            -__main__.py
            +config
                -__init__.py
                +tests
                    -__init__.py
                    -test_blah.py
            +core
            +lib
            +html
                -__init__.py
                -__main__.py
                +tests
                    -__init__.py
                    -test_blah.py
[ ] requests
    single test_requests.py
    >requests
        -setup.py
        -test_requests.py
        +requests
            -__init__.py
            +packages
                """third party packages"""
[ ] fabric
    entry_points['console_scripts'] = ['fab = fabric.main:main']
    >fabric
        -setup.py
        +tests
            -test_main.py
        +fabric
            -__init__.py
            -main.py
            -version.py
[ ] pylint
    executables under bin/
    >pylint
        -setup.py
            """
            entry_points    'pylint = pylint:run_pylint'
            """
        -__init__.py
            """
            define run_pylint
            """
        -__main__.py
            """
            import pylint
            pylint.run_pylint()
            """
        -lint.py
        +bin
        +debian
        +checkers (this is subpackage)
        +pyreverse (this is subpackage)
        +test (no __init__.py)
            -test_regr.py
            -unittest_lint.py

====

[ ] use print('\ron the same line', end='') to update a line

[ ] display_session_info:
    """called between stop() and start() in on_any_event()
    session_info = (event, session_title)
    prev_event = session_info.event
    if event eq prev_event:
        do nothing
    else:
        print('\r info', end='')

[ ] move main script out
    [ ] run a submodule as a script is deprecated
    [ ] use `env PYTHONPATH=path/to/package:$PYTHONPATH python -m __main__`

[ ] watchdog event queue with start and end sentinels

[ ] ordered event receivers, so the order of handlers execution can be defined

[ ] support callable as command for Dog

[ ] support gitignore '!' started patterns

[ ] show GUI notifier

[ ] provide case_sensitive option, default is False

[ ] use a config dict to collect all needed config options
    [ ] config['dogs'] or config.dogs

[ ] add double quotes to default command output

[ ] when _apply_main_args(), test
    [ ] dogs is a tuple of wdog.Dog
        [ ] handle empty dogs tuple error, exit gracefully

[ ] expanduser when parsing main args

====

[ ] about watchdog package:
    [ ] should document Observer.remove_handler_for_watch() and
        Observer.unschedule() raise KeyError if handler for watch or watch for
        observer does not exist
    [ ] should document Observer.schedule accepts both relative and absolute
        path
    [ ] should document ObservedWatch is hashable
    [ ] should document FileSystemEventHandler is hashable
        [ ] should document FileSystemEventHandler objects by default are not
            equal event they are constructed using the same parameters
    [ ] should document Observer.schedule and Observer.add_handler_for_watch
        both remove duplications automatically
    [ ] problem: generate two identical modified event in a row when modifying
        a file

[ ] nosetests
    [ ] @unittest.expectedFailure RuntimeWarning
